}
}
r_walk()
#random walk
r_walk<-function() {
z<-5
while (z>=3 && z<=10) {
print(z)
coin=rbinom(1,2,0.5)
if (coin==1) {
z=z+1
} else {
z=z-1
}
}
}
r_walk()
#random walk
r_walk<-function() {
z<-5
while (z>=3 && z<=10) {
print(z)
coin=rbinom(1,2,0.5)
if (coin==1) {
z=z+1
} else {
z=z-1
}
}
}
r_walk()
#random walk
r_walk<-function() {
z<-5
while (z>=3 && z<=10) {
print(z)
coin=rbinom(1,2,0.5)
if (coin==1) {
z=z+1
} else {
z=z-1
}
}
}
r_walk()
#random walk
r_walk<-function() {
z<-5
while (z>=3 && z<=10) {
print(z)
coin=rbinom(1,2,0.5)
if (coin==1) {
z=z+1
} else {
z=z-1
}
}
}
r_walk()
#random walk
r_walk<-function() {
z<-5
while (z>=3 && z<=10) {
print(z)
coin=rbinom(1,2,0.5)
if (coin==1) {
z=z+1
} else {
z=z-1
}
}
}
r_walk()
#random walk
r_walk<-function() {
z<-5
while (z>=3 && z<=10) {
print(z)
coin=rbinom(1,2,0.5)
if (coin==1) {
z=z+1
} else {
z=z-1
}
}
}
r_walk()
#random walk
r_walk<-function() {
z<-5
while (z>=3 && z<=10) {
print(z)
coin=rbinom(1,2,0.5)
if (coin==1) {
z=z+1
} else {
z=z-1
}
}
}
r_walk()
?computeEstimate
x<-1:20
use<-x>12
use
x[use]
?ncol
ncol(y)
a<-matrix(1:6,3,2)
ncol(a)
nc<-ncol(a)
means<-numeric(nc)
means
numeric(nc)
?numeric
nc
?na.rm
?na.rm()
?sd
?lm
gl(2,10,20,labels=c("Ctl","Trt"))
gl(2,5,2)
gl(2,5,10)
gl(c(1,3),5,20)
gl(c(1,3),10,20)
gl(c(1,3),10)
gl(1,3)
gl(c(1,3),c(1,2))
?gl
gl(3,4,10)
?optim
#random walk
r_walk<-function() {
z<-5
while (z>=3 && z<=10) {
print(z)
coin=rbinom(1,2,0.5)
if (coin==1) {
z=z+1
} else {
z=z-1
}
}
}
r_walk()
lapply
?lapply
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
?rnorm
rnorm(1)
rnorm(1)
rnorm(10)
rnorm(1,2,1)
rnorm(1,2,1)
rnorm(1,2,1)
rnorm(1,2,1)
rnorm(1,2,1)
rnorm(1,2,1)
?runif
runif
x<-1:2
lapply(x,runif)
lapply(2,runif)
?elt
x<-list(matrix(1:6,2,3),matrix(1:6,3,2))
lapply(x, function(etc) etc[,2])
sapply(x, function(etc) etc[,2])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)
?apply
x<-matrix(1:6,2,3)
apply(x,2,mean)
x
apply(x,1,mean)
apply(x,3,mean)
x<-matrix(1:9,3,3)
apply(x,3,mean)
x<-matrix(1:6,2,3)
x
apply(x,1,sum)
apply(x,2,sum)
apply(x,1:2,sum)
apply(x,1:2,mean)
apply(x,2,mean)
apply(x,1,quantile,probs=c(0.25,0.75))
?quantile
x
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
apply(a, c(1, 2), mean)
a
?array
apply(x,c(1,2),mean)
x<-matrix(1:6,2,3)
apply(x,c(1,2),mean)
?rowMeans
install.packages("sampling_method_scripts")
install.packages("~/Documents/B_Project/sampling_method/packrat/src/packrat/packrat_0.4.3.tar.gz", repos = NULL, type = "source")
source("sampling_method_scripts.R")
library(sampling_method_scripts)
library(packrat)
ls()
objects()
src()
packrat
lr()
lr
x
remove.packages("packrat")
install.packages("packrat")
install.packages("packrat")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
objects()
πPS_N<-3
zj<-zi<-c(1/2,1/3,1/6)
πi<-2*zi
D<-(1+sum(zi/(1-2*zi)))/2
π<-0
for (i in 1:3) {
for (j in 1:3) {
π[i][j]<-(4*zi[i]*zj[j]*(1-zi[i]-zj[j]))/(D*(1-2*zi[i])*(1-2*zj[j]))
}
}
πPS_N<-3
zj<-zi<-c(1/2,1/3,1/6)
πi<-2*zi
D<-(1+sum(zi/(1-2*zi)))/2
π<-matrix(0,3,3,byrow=TRUE)
for (i in 1:3) {
for (j in 1:3) {
π[i][j]<-(4*zi[i]*zj[j]*(1-zi[i]-zj[j]))/(D*(1-2*zi[i])*(1-2*zj[j]))
}
}
View(`π`)
#n=2的πPS抽样
πPS_N<-3
zj<-zi<-c(1/2,1/3,1/6)
πi<-2*zi
D<-(1+sum(zi/(1-2*zi)))/2
#π<-matrix(0,3,3,byrow=TRUE)
for (i in 1:3) {
for (j in 1:3) {
π[i][j]<-(4*zi[i]*zj[j]*(1-zi[i]-zj[j]))/(D*(1-2*zi[i])*(1-2*zj[j]))
}
}
#n=2的πPS抽样
πPS_N<-3
zj<-zi<-c(1/2,1/3,1/6)
πi<-2*zi
D<-(1+sum(zi/(1-2*zi)))/2
#π<-matrix(0,3,3,byrow=TRUE)
for (i in 1:3) {
for (j in 1:3) {
print((4*zi[i]*zj[j]*(1-zi[i]-zj[j]))/(D*(1-2*zi[i])*(1-2*zj[j])))
}
}
(4*zi[1]*zj[1]*(1-zi[1]-zj[1]))/(D*(1-2*zi[1])*(1-2*zj[1]))
zi[i]
zi[i]
zi[1]
zi[1]*zj[1]
1-zi[1]-zj[1]
1-zi[1]-zj[2]
(1-2*zi[1])*(1-2*zj[1])
#n=2的πPS抽样
πPS_N<-3
zj<-zi<-c(1/2,1/3,1/6)
πi<-2*zi
D<-(1+sum(zi/(1-2*zi)))/2
#π<-matrix(0,3,3,byrow=TRUE)
for (i in 1:3) {
for (j in i:3) {
print((4*zi[i]*zj[j]*(1-zi[i]-zj[j]))/(D*(1-2*zi[i])*(1-2*zj[j])))
}
}
πPS_N<-3
zj<-zi<-c(1/2,1/3,1/6)
πi<-2*zi
D<-(1+sum(zi/(1-2*zi)))/2
#π<-matrix(0,3,3,byrow=TRUE)
ps<-function(i,j) {
ps<-(4*zi[i]*zj[j]*(1-zi[i]-zj[j]))/(D*(1-2*zi[i])*(1-2*zj[j]))
print(ps)
}
ps(1,1)
ps(1,2)
D
πPS_N<-3
zj<-zi<-c(1/2,1/3,1/6)
πi<-2*zi
d<-zi/(1-2*zi)
D<-(1+sum(d))/2
#π<-matrix(0,3,3,byrow=TRUE)
ps<-function(i,j) {
ps<-(4*zi[i]*zj[j]*(1-zi[i]-zj[j]))/(D*(1-2*zi[i])*(1-2*zj[j]))
print(ps)
}
d
N=6;n=2
X=1
y=c(2,3,6,8,11,14)
x=c(1,2,4,7,9,13)
t=1.96
data<-data.frame(x,y,n,N,X,t)
data
print(srs(data))
source("test.R")
ratio<-function(data,...) {
x<-data[,1]
y<-data[,2]
n<-data[1,3]
N<-data[1,4]
X<-data[1,5]
t<-data[1,6]
f<-n/N
R<-sum(y)/sum(x)
y_r<-X*R
var_y_r<-N^2*(1-f)/n*(sum(y^2)+R^2*sum(x^2)-2*R*sum(y*x))/(n-1)
se_y_r<-sqrt(var_y_r)
inv_l<-y_r-t*se_y_r
inv_u<-y_r+t*se_y_r
cv_y_r<-se_y_r/y_r
result<-data.frame(y_r,var_y_r,se_y_r,cv_y_r,inv_l,inv_u)
}
#简单
srs<-function(data,...) {
x<-data[,1]
y<-data[,2]
n<-data[1,3]
N<-data[1,4]
t<-data[1,6]
f<-n/N
y_mean<-mean(y)
y_srs<-y_mean*N
var_y_srs<-N^2*(1-f)*var(y)/n
se_y_srs<-sqrt(var_y_srs)
inv_l<-y_srs-t*se_y_srs
inv_u<-y_srs+t*se_y_srs
cv_srs<-se_y_srs/y_srs
result<-data.frame(y_srs,var_y_srs,se_y_srs,cv_srs,inv_l,inv_u)
}
data<-data.frame(x,y,n,N,X,t)
print(srs(data))
print(ratio(data))
f<-n/N
R<-sum(y)/sum(x)
y_r<-X*R
var_y_r<-N^2*(1-f)/n*(sum(y^2)+R^2*sum(x^2)-2*R*sum(y*x))/(n-1)
se_y_r<-sqrt(var_y_r)
R
var_y_r
?savePlot
x<-data.frame(i=sample(1:10,10),rep(1:3,10))
x
savePlot
savePlot(plot(x[1]~x[2]))
plotx=plot(x[1]~x[2],type='l')
View(x)
?plot
plotx=plot(x)
savePlot(plotx)
real(3)
??real
samp=function（n,theta,i）{        #   n     样本量    #   theta 分布的参数    #   i=1   norm    #     2   unif    #     3   pois        type.distribution=c("norm","unif","pois")    samp=real(n)    if (i==1) {  }    else if () { }    else {            }    }out.fun=function(i){    }
samp=function（n,theta,i）{        #   n     样本量    #   theta 分布的参数    #   i=1   norm    #     2   unif    #     3   pois        type.distribution=c("norm","unif","pois")    samp=real(n)    if (i==1) {  }    else if () { }    else {            }    }out.fun=function(i){    }
?rnorm
as.factor(c(1,3,2),c("a","b","c"))
as.factor(data.frame(c(1,3,2),c("a","b","c")))
?runif
?rpois
sampling<-function(n,method,...) {
#print("method='rnorm','runif','rpois'")
if (method==1 | method=="rnorm") {
s=rnorm(n)
}
if (method==2 | method=="runif") {
s=runif(n)
}
if (method==3 | method=="rpois") {
s=rpois(n)
}
list(mean=mean(s),var=var(s))
}
sampling(100,2)
sampling(100,1)
sampling(100,3)
sampling<-function(n,method,...) {
#print("method='rnorm','runif','rpois'")
if (method==1 | method=="rnorm") {
s=rnorm(n)
}
if (method==2 | method=="runif") {
s=runif(n)
}
if (method==3 | method=="rpois") {
s=rpois(n,1)
}
list(mean=mean(s),var=var(s))
}
sampling(100,3)
sampling<-function(n,method,...) {
#print("method='rnorm','runif','rpois'")
if (method==1 | method=="rnorm") {
print("do you decide to use default parameters for Normal Dis? enter y or n")
i=scan("")
if (i=="n") {
print("enter parameters for Normal Dis, mean and sd")
parameters=scan()
s=rnorm(n,parameters[1],parameters[2])
} else s=rnorm(n)
}
if (method==2 | method=="runif") {
print("do you decide to use default parameters for Uniform Dis? enter y or n")
i=scan("")
if (i=="n") {
print("enter parameters for Uniform, min and max")
parameters=scan()
s=runif(n,parameters[1],parameters[2])
} else s=runif(n)
}
if (method==3 | method=="rpois") {
print("enter parameter lambda for Poisson Dis.")
lambda=scan()
s=rpois(n,lambda)
}
list(mean=mean(s),var=var(s))
}
sampling(100,rnorm)
sampling(100,"rnorm")
scan()
scan('')
cat("")
cat()
?scan
x<-scan("")
scan("")
scan("",what="")
sampling<-function(n,method,...) {
#print("method='rnorm','runif','rpois'")
if (method==1 | method=="rnorm") {
print("do you decide to use default parameters for Normal Dis? enter y or n")
i=scan("",what="")
if (i=="n") {
print("enter parameters for Normal Dis, mean and sd")
parameters=scan("")
s=rnorm(n,parameters[1],parameters[2])
} else s=rnorm(n)
}
if (method==2 | method=="runif") {
print("do you decide to use default parameters for Uniform Dis? enter y or n")
i=scan("",what="")
if (i=="n") {
print("enter parameters for Uniform, min and max")
parameters=scan("")
s=runif(n,parameters[1],parameters[2])
} else s=runif(n)
}
if (method==3 | method=="rpois") {
print("enter parameter lambda for Poisson Dis.")
lambda=scan("")
s=rpois(n,lambda)
}
list(mean=mean(s),var=var(s))
}
sampling(100,"rnorm")
sampling<-function(n,method,...) {
#print("method='rnorm','runif','rpois'")
if (method==1 | method=="rnorm") {
print("do you decide to use default parameters for Normal distribution? enter y or n")
i=scan("",what="")
if (i=="n") {
print("enter parameters for Normal distribution, mean and sd")
parameters=scan("")
s=rnorm(n,parameters[1],parameters[2])
} else s=rnorm(n)
}
if (method==2 | method=="runif") {
print("do you decide to use default parameters for Uniform distribution? enter y or n")
i=scan("",what="")
if (i=="n") {
print("enter parameters for Uniform, min and max")
parameters=scan("")
s=runif(n,parameters[1],parameters[2])
} else s=runif(n)
}
if (method==3 | method=="rpois") {
print("enter parameter lambda for Poisson distribution.")
lambda=scan("")
s=rpois(n,lambda)
}
list(mean=mean(s),var=var(s))
}
?postscript
?optimize
library(foreign)
temp<-read.spss("2008data.sav")
write.csv(temp,"data2008.csv",row.names=F)
data2008<-read.csv("data2008.csv")
mu<-colMeans(data2008[,2:9],na.rm=T);mu
new_data2008<-na.omit(data2008[,2:9])
v=numeric(ncol(new_data2008))
for (i in 1:ncol(new_data2008)) {
v[i]=var(new_data2008[i])
}
var=v;var
sd<-sqrt(var);sd
cov<-cov(new_data2008);cov
cor<-cor(new_data2008);cor
cov_cor<-cov2cor(cov);cov_cor
